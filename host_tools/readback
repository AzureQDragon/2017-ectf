#!/usr/bin/env python2

"""
Memory Readback Tool

Generates a readback request from user-provided
start address and segment length

Creates a request authenticator (MAC) confirm
that request is from a legitimate host/user

Authenticator has form : HASH[key+HASH(key+nonce+request)]
"""

import serial
import struct
import sys
import argparse
import json
import os
import nacl.utils
import nacl.hash
import nacl.encoding

RESP_OK = b'\x00'

NONCE_BYTES = 24

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Memory Readback Tool')

    parser.add_argument("--port", help="Serial port to send update over.",
                        required=True)
    parser.add_argument("--address", help="First address to read from.",
                        required=True)
    parser.add_argument("--num-bytes", help="Number of bytes to read.",
                        required=True)
    parser.add_argument("--datafile", help="File to write data to (optional).")
    parser.add_argument("--debug", "-d", help="Display debug message", action='count')

    args = parser.parse_args()

    # Open serial port. Set baudrate to 115200. Set timeout to 2 seconds.
    ser = serial.Serial(args.port, baudrate=115200, timeout=2)

    # Create SHA512 hasher
    HASHER = nacl.hash.sha512

    # Wait for bootloader to reset/enter readback mode.
    print("Waiting for bootloader to enter readback mode...")
    while ser.read() != 'R':
        pass

    # Open secret_configure_output.txt for readback key
    try:
        with open('secret_configure_output.txt', 'r') as f:
            secret_params = json.load(f)
            key = secret_params['readback_key'].decode('hex')
    except:
        raise RuntimeError("Secret configuration file not found")

    # Generate 24 byte nonce for authentication
    nonce = nacl.utils.random(NONCE_BYTES)

    if args.debug:
        print("Nonce generated: {}".format(repr(nonce.encode('hex'))))

    # Construct readback request from address and number of bytes
    # 4 bytes for address, 4 bytes for segment length
    request = struct.pack('>II', int(args.address), int(args.num_bytes))
    print("Generated readback request")

    if args.debug:
        print("Request: {}".format(repr(request.encode('hex'))))

    # Hash key, nonce, and request together
    msg = key + nonce + request
    auth1 = HASHER(msg).decode('hex')

    # Hash key and auth1 together
    msg = key + auth1
    auth = HASHER(msg).decode('hex')

    # Send authenticator, nonce, and request to bootloader
    ser.write(auth)
    ser.write(nonce)
    ser.write(request)

    # Wait for OK from bootloader, confirming data reception
    resp = ser.read()
    if resp != RESP_OK:
        raise RuntimeError("ERROR sending data: Bootloader responded with {}".format(repr(resp)))

    # Wait for OK from bootloader, confirming authentication
    resp = ser.read()
    if resp != RESP_OK:
        raise RuntimeError("ERROR authenticating host: Bootloader responded with {}".format(repr(resp)))

    # Read back data from bootloader and print to screen
    data = ser.read(int(args.num_bytes))
    print(data.encode('hex'))

    # Write raw data to file if included in cmd args
    if args.datafile:
        with open(args.datafile, 'wb+') as datafile:
            datafile.write(data)
