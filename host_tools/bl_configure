#!/usr/bin/env python2
"""
Bootloader Configuration Tool

This tool is responsible for configuring the bootloader after it is programmed.
"""
import os
import random
import shutil
import argparse
import json
import nacl.utils
import nacl.hash
import nacl.encoding
import serial
import struct

FILE_DIR = os.path.abspath(os.path.dirname(__file__))
CONFIG = b'\x43'

def generate_secret_file():
    """
    Compile all secrets from build and configuration and store to secret file.
    """
    # Get directory containing this file (host_tools).
    directory = os.path.dirname(FILE_DIR)

    # Open secret build outputs
    with open("secret_build_output.txt", "r") as f:
        secret_params = json.load(f)

    # store secret parameters in secret_configure_output
    with open(os.path.join(FILE_DIR, 'secret_configure_output.txt'), 'w') as secret_configure_output:
        json.dump(secret_params, secret_configure_output)

def configure_bootloader(serial_port):
    """
    Configure bootloader using serial connection.
    -- Will take bootloader out of intermediate state
    """
    # Tell bootloader to exit configure mode (0x43)
    serial_port.write(CONFIG)
    resp = serial_port.read()
    if resp != CONFIG:
        raise RuntimeError("ERROR: Bootloader not configured correctly {}".format(repr(resp)))
    print("Bootloader Configured Successfully")

if __name__ == '__main__':
    # Argument parser setup.
    parser = argparse.ArgumentParser(description='Bootloader Config Tool')
    parser.add_argument('--port', help='Serial port to use for configuration.',
                        required=True)
    args = parser.parse_args()

    # Create serial connection using specified port.
    serial_port = serial.Serial(args.port, baudrate=115200, timeout=2)

    # Do configuration, close serial port
    try:
        configure_bootloader(serial_port)
    finally:
        serial_port.close()

    # Generate secret file; transfer keys to secret_configure_output
    generate_secret_file()
